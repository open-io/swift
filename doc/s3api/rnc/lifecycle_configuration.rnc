include "common.rnc"

start =
  element LifecycleConfiguration {
    element Rule {
      element ID { xsd:string }? &
      element Filter {
          element And {
            element Prefix { xsd:string }? &
            element Tag {
              element Key { xsd:string } &
              element Value { xsd:string }
            }* &
            element ObjectSizeGreaterThan {xsd:int}? &
            element ObjectSizeLessThan {xsd:int}?
          }? |
          element Prefix { xsd:string }? |
          element Tag {
              element Key { xsd:string } &
              element Value { xsd:string }
          }? |
          element ObjectSizeGreaterThan {xsd:int}? |
          element ObjectSizeLessThan {xsd:int}?

      }? &
      element Prefix { xsd:string }? &
      element Status { "Enabled" | "Disabled" } &
      element AbortIncompleteMultipartUpload {
          element DaysAfterInitiation { xsd:int }
      }? &
      element Expiration { Expiration }? &
      element NoncurrentVersionExpiration {
        element NoncurrentDays { xsd:int } &
        element NewerNoncurrentVersions { xsd:nonNegativeInteger } ?
      }? &
      element NoncurrentVersionTransition { NoncurrentVersionTransition }* &
      element Transition { Transition }*
    }+
  }

Expiration =
# Days cannot be 0, but we want InvalidArgument, not MalformedXML,
# thus we must let the parser accept 0, and check the value afterwards.
  element Days { xsd:int } |
  element Date { xsd:dateTime } |
  element ExpiredObjectDeleteMarker { xsd:boolean }

NoncurrentVersionTransition =
  element NoncurrentDays { xsd:int }? &
  element NewerNoncurrentVersions { xsd:nonNegativeInteger }? &
  element StorageClass { xsd:string }

Transition =
  element Days { xsd:int }? &
  element Date { xsd:dateTime }? &
  element StorageClass { xsd:string }
