version: v1.0
name: swift-tests-reports
jobs:
  - job: Collect coverage
    steps:

      - name: Checkout application
        checkout: '{{.cds.workspace}}'

      - name: Install dependencies
        script:
          - apt update
          - apt install -y jq lcov python3-virtualenv virtualenv
          - virtualenv -p /usr/bin/python3 $HOME/oiovenv
          - . $HOME/oiovenv/bin/activate
          - pip install --upgrade awscli awscli-plugin-endpoint coverage pip virtualenv git+https://github.com/boyska/xq.git

      - artifactDownload:
          path: '{{.cds.workspace}}'
          pattern: 'coverage.*'
          tag: '{{.cds.version}}'

      - name: Aggregate coverage statistics
        script:
          - . $HOME/oiovenv/bin/activate
          - cd {{.cds.workspace}}
          - coverage combine
          - coverage report --skip-empty --ignore-errors > coverage-report-py.txt
          - worker upload --tag='{{.cds.version}}' {{.cds.workspace}}/coverage-report-py.txt
          - coverage xml --skip-empty --ignore-errors -o coverage-py.xml
          - coverage html --skip-empty --ignore-errors -d coverage-report-py
          - coverage json --omit="/usr/lib/python3*" --ignore-errors -o coverage-report-py-full.json
          - jq -f .cds/python-coverage-filter.jq coverage-report-py-full.json > coverage-report-py.json

      - coverage:
          format: cobertura
          path: '{{.cds.workspace}}/coverage-py.xml'

      - name: Download test result artifacts
        artifactDownload:
          path: '{{.cds.workspace}}'
          pattern: 'tests_report.*.xml'
          tag: '{{.cds.version}}'

      - name: Aggregate test results
        optional: true
        script: |+
          #!/bin/bash
          . $HOME/oiovenv/bin/activate
          export TEST_COUNT=0
          export TEST_FUNC=0
          export TEST_UNIT=0
          shopt -s nullglob
          for TEST_RESULT in tests_report.*.xml
          do
            count=$(xq -r "/testsuite/@tests" $TEST_RESULT)
            if [[ "$TEST_RESULT" =~ .+unit.* ]]
            then
              ((TEST_UNIT+=$count))
            else
              ((TEST_FUNC+=$count))
            fi
            ((TEST_COUNT+=$count))
          done
          shopt -u nullglob
          echo "{\"tests\": {\"Python\": {\"functional\": $TEST_FUNC, \"total\": $TEST_COUNT, \"unit\": $TEST_UNIT}}}" > test-report-py.json

      - jUnitReport: '{{.cds.workspace}}/tests_report.*.xml'
        optional: true

      - name: Create code coverage directory
        script:
          - cd {{.cds.workspace}}
          - jq -r '"obsto_kpi_dev_coverage_line_total{language=\"python\",repository=\"swift\"} \(.coverage.Python.line_total)"' coverage-report-py.json >coverage-summary.openmetrics
          - jq -r '"obsto_kpi_dev_coverage_line_percentage{language=\"python\",repository=\"swift\"} \(.coverage.Python.line_percent)"' coverage-report-py.json >>coverage-summary.openmetrics
          - jq -r '"obsto_kpi_dev_tests_total{repository=\"swift\",type=\"functional\"} \(.tests.Python.functional)"' test-report-py.json >>coverage-summary.openmetrics
          - jq -r '"obsto_kpi_dev_tests_total{repository=\"swift\",type=\"unit\"} \(.tests.Python.unit)"' test-report-py.json >>coverage-summary.openmetrics
          - worker upload --tag='{{.cds.version}}' coverage-summary.openmetrics
          - mkdir coverage
          - mv coverage-report-py coverage-summary.openmetrics coverage/
          - echo '<!DOCTYPE html><html><a href="./coverage-report-py/">Python coverage report</a><br/><a href="./coverage-summary.openmetrics">Coverage summary (OpenMetrics format)</a></body></html>' > coverage/index.html

      - name: Publish code coverage reports on S3 public cloud
        script: |+
          #!/bin/bash
          . $HOME/oiovenv/bin/activate
          cd {{.cds.workspace}}
          mkdir -p "$HOME/.aws"
          cat <<EOF >>"$HOME/.aws/credentials"
          [kpi]
          aws_access_key_id={{.cds.proj.kpi_s3_access_key}}
          aws_secret_access_key={{.cds.proj.kpi_s3_access_secret}}
          region=gra
          EOF
          cat <<EOF >>"$HOME/.aws/config"
          [plugins]
          endpoint = awscli_plugin_endpoint
          [profile kpi]
          s3 =
              endpoint_url = {{.cds.proj.kpi_s3_endpoint}}
              signature_version = s3v4
              addressing_style = virtual
              multipart_threshold = 100MB
          s3api =
              endpoint_url = {{.cds.proj.kpi_s3_endpoint}}
          EOF
          # There may be a more elegant way in bash to filter out the name of
          # development branches, but this weird method also applies to the
          # OVH_Serve_Static_Files step (where we cannot use bash).
          aws --profile kpi s3 cp coverage/coverage-summary.openmetrics s3://{{.cds.proj.kpi_s3_bucket}}/{{.cds.application}}/{{ .git.branch | replace "dev/" "develop/" | replace "feature/oio-backend" "master" | trunc 7 | replace "develop" "dev" }}/{{.cds.version}}/coverage-summary.openmetrics
          # If we re-run an old build, this will overwrite the report of the
          # actual latest merged code. This will not happen often.
          [ "{{ .git.branch }}" = "feature/oio-backend" ] && aws --profile kpi s3 cp coverage/coverage-summary.openmetrics s3://{{.cds.proj.kpi_s3_bucket}}/{{.cds.application}}/master/latest/coverage-summary.openmetrics || true

      - name: Publish code coverage reports on Artifactory
        optional: true
        OVH_Serve_Static_Files:
          destination: 'coverage/{{ .git.branch | replace "dev/" "develop/" | replace "feature/oio-backend" "master" | trunc 7 | replace "develop" "dev" }}/{{.cds.version}}'
          source: coverage
