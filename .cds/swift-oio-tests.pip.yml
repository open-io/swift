version: v.10
name: swift-oio-tests
jobs:
  - job: Run oio tests
    steps:

      - name: Checkout application
        checkout: '{{ .cds.workspace }}'

      - name: Install dependencies
        script: |+
          #!/bin/bash
          set -x
          . .cds/versions
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get purge -y --allow-remove-essential shim-signed  # To be deleted as soon as the model is corrected
          echo "deb [trusted=yes] http://read:{{.cds.proj.private_ovh_objectstorage_openio_read_password}}@last-private-ovh-objectstorage-openio.snap-priv.mirrors.ovh.net/ubuntu focal/main main" >> /etc/apt/sources.list.d/obsto.list
          echo "deb [trusted=yes] http://last-public-ovh-pcs.snap.mirrors.ovh.net/ubuntu focal main" >> /etc/apt/sources.list.d/obsto.list
          apt-add-repository ppa:longsleep/golang-backports
          apt update
          # rabbitmq-server is not is the list as only necessary for oio-tests
          apt-get install -y rabbitmq-server $(tr '\n' ' ' < .cds/deps-ubuntu-focal.txt) ${GO_PACKAGE} ${PYTHON_PACKAGE} ${ZOOKEEPER_PACKAGE}
          systemctl stop redis.service
          systemctl disable redis.service
          echo "export PATH=/opt/${GO_PACKAGE}/bin:/opt/${PYTHON_PACKAGE}/bin:/opt/${ZOOKEEPER_PACKAGE}/bin:$PATH" > $HOME/swift-env.sh
          echo "export ZOOBINDIR=/opt/${ZOOKEEPER_PACKAGE}/bin"  >> $HOME/swift-env.sh
          echo "export ZOOLIBDIR=/opt/${ZOOKEEPER_PACKAGE}/lib"  >> $HOME/swift-env.sh
          echo "export ZOOINCDIR=/opt/${ZOOKEEPER_PACKAGE}/include/zookeeper"  >> $HOME/swift-env.sh
          echo 'export CMAKE_OPTS="-DCMAKE_INSTALL_PREFIX=/tmp/oio -DLD_LIBDIR=lib -DZK_LIBDIR=${ZOOLIBDIR} -DZK_INCDIR=${ZOOINCDIR}"' >> $HOME/swift-env.sh
          echo "export LD_LIBRARY_PATH=/opt/${GO_PACKAGE}/lib:/opt/${PYTHON_PACKAGE}:/opt/${ZOOKEEPER_PACKAGE}/lib:/tmp/oio/lib" >> $HOME/swift-env.sh
          echo "export PIP_INDEX_URL=https://${PYPI_SNAPSHOT}-pypi.snap.mirrors.ovh.net/simple/" >> $HOME/swift-env.sh
          echo "export PYTHONPATH=$(find /opt/${PYTHON_PACKAGE}/lib/ -name 'site-packages')" >> $HOME/swift-env.sh
          source $HOME/swift-env.sh
          mkdir /tmp/oio
          /opt/${PYTHON_PACKAGE}/bin/python3 -m venv $HOME/swiftenv
          cat << EOF > $HOME/swiftenv/pip.conf
          [global]
          index-url = https://${PYPI_SNAPSHOT}-pypi.snap.mirrors.ovh.net/simple/
          EOF
          . $HOME/swiftenv/bin/activate
          pip install --upgrade pip setuptools virtualenv "tox<4.0.0" -r test-requirements.txt
          test -n "{{.cds.env.SDS_BRANCH}}" && git config --local submodule.oio-sds.branch "{{.cds.env.SDS_BRANCH}}" || true
          eval $(worker key install --env-git proj-ssh-openio)
          git submodule update --init --remote
          cd third_party/oio-sds && pip install -e . && cd ../..
          pip install -e .
          ./third_party/oio-sds/tools/patch-python-modules.sh
          . ./oio_tests/functional/common.sh
          install_foundationdb "${FDB_VERSION}"
          rabbitmq-plugins enable rabbitmq_management

          echo "RateLimitBurst=0" >> /etc/systemd/journald.conf
          echo '$SystemLogRateLimitInterval 0' >> /etc/rsyslog.conf
          systemctl restart systemd-journald.service
          systemctl restart rsyslog.service

      - name: Run oio functional tests
        script: |+
          #!/bin/bash
          source $HOME/swift-env.sh
          pgrep rsyslogd || rsyslogd &
          sysctl -w kernel.core_pattern='/tmp/core.%p.%E'
          ulimit -c unlimited
          ulimit -n 8192
          . $HOME/swiftenv/bin/activate
          ./oio_tests/run_tests.sh '{{.cds.env.TEST_SUITE}}'

      - name: Analyze Ceph S3 tests results
        script:
            - '[ "{{.cds.env.TEST_SUITE}}" = "ceph-s3tests" ] || exit 0'
            - . $HOME/swiftenv/bin/activate
            - ./third_party/ceph-s3tests-reports/bin/report.py --detailed ceph-s3tests-attributes.yaml --known-failures doc/s3api/conf/ceph-known-failures-oio.yaml tests_report.xml

      - name: Save coverage information
        always_executed: true
        script:
          - . $HOME/swiftenv/bin/activate
          - coverage combine
          - mv .coverage .coverage.oio.{{.cds.env.TEST_SUITE}}
          - worker upload --tag='{{.cds.version}}' '{{.cds.workspace}}/.coverage.oio.{{.cds.env.TEST_SUITE}}'
          - 'journalctl -n 50000 -o short-precise -t "OIO,NS,oioswift,1" >> oioswift.{{.cds.env.TEST_SUITE}}.log'
          - 'journalctl -n 50000 -o short-precise -t "OIO,OPENIO,account,1" >> account.{{.cds.env.TEST_SUITE}}.log'
          - worker upload --tag='{{.cds.version}}' 'oioswift.{{.cds.env.TEST_SUITE}}.log'
          - worker upload --tag='{{.cds.version}}' 'account.{{.cds.env.TEST_SUITE}}.log'

      - optional: true
        always_executed: true
        name: Save tests report
        script:
          - '[ "{{.cds.env.TEST_SUITE}}" = "ceph-s3tests" -a -f tests_report.xml ] && mv tests_report.xml "tests_report.ceph.s3tests.xml"'
          - '[ ! -f tests_report.xml ] || mv tests_report.xml "tests_report.oio.{{.cds.env.TEST_SUITE}}.xml"'
          - '[ ! -f tests_report.*.xml ] || worker upload --tag="{{.cds.version}}" tests_report.*.xml'

      - optional: true
        always_executed: true
        jUnitReport: '{{.cds.workspace}}/tests_report.*.xml'

    requirements:
      - model: Ubuntu-20.04-VM-b2-15
