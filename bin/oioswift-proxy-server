#!/usr/bin/env python
# Copyright (c) 2010-2020 OpenStack Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function

import os
import os.path
import sys
from optparse import OptionParser

# Immediately change "wsgi" before importing the other modules
# for this modification to be propagated everywhere
from swift.common import oio_wsgi
from swift.common import wsgi
from swift.common import utils  # noqa: E402

# oio-sds does not allow the NUL character in container or object names.
# Instead, use the DLE (Data Link Escape, ^P) character.
utils.RESERVED_BYTE = b'\x10'
utils.RESERVED_STR = u'\x10'
utils.RESERVED = '\x10'

# oio-sds uses object versions with microsecond precision.
OIO_NORMAL_FORMAT = "%016.06f"
utils.NORMAL_FORMAT = OIO_NORMAL_FORMAT
utils.INTERNAL_FORMAT = utils.NORMAL_FORMAT + '_%016x'
utils.SHORT_FORMAT = utils.NORMAL_FORMAT + '_%x'
OIO_PRECISION = 1e-6
utils.PRECISION = OIO_PRECISION
utils.INV_PRECISION = round(1 / utils.PRECISION)
utils.MAX_RAW_TIMESTAMP = (10000000000 * utils.INV_PRECISION) - 1

orig_run_server = wsgi.run_server


def run_server_wrapper(conf, logger, sock, global_conf=None, **kwargs):
    if global_conf is None and GLOBAL_CONF is not None:
        global_conf = {k: v for k, v in GLOBAL_CONF.items()
                       if k.startswith('oio')}
    return orig_run_server(conf, logger, sock, global_conf, **kwargs)


wsgi.make_env = oio_wsgi.oio_make_env
wsgi.make_subrequest = oio_wsgi.oio_make_subrequest
wsgi.run_server = run_server_wrapper


from swift.proxy.oio_server import global_conf_callback  # noqa: E402

GLOBAL_CONF = None


def global_conf_callback_wrapper(preloaded_app_conf, global_conf):
    global GLOBAL_CONF
    global_conf_callback(preloaded_app_conf, global_conf)
    GLOBAL_CONF = global_conf


def run_objgraph(types):
    import objgraph
    import random
    objgraph.show_most_common_types(limit=50, shortnames=False)
    for type_ in types:
        count = objgraph.count(type_)
        print('%s objects: %d' % (type_, count))
        if count:
            objgraph.show_backrefs(
                random.choice(objgraph.by_type(type_)), max_depth=20,
                filename='/tmp/backrefs_%s_%d.dot' % (type_, os.getpid()))


if __name__ == '__main__':
    parser = OptionParser(usage="%prog CONFIG [options]")
    parser.add_option('--objgraph', action='store_true',
                      help=('Run objgraph, show most common '
                            'types before exiting'))
    parser.add_option('--show-backrefs', action='append', default=list(),
                      help=('Draw backreference graph for one randomly '
                            'chosen object of that type. Can be used '
                            'multiple times.'))
    parser.add_option('--profile-output',
                      help=('Save profiling output to the specified file. '
                            'You can specify {pid} and {prog} in the file '
                            'name. If the file name starts with '
                            '"callgrind.out", save to callgrind format '
                            '(yappi only).'))
    parser.add_option('--profiler',
                      default='eventlet',
                      help=('Which profiler to use: eventlet or yappi.'))
    conf_file, options = utils.parse_options(parser)
    if options.get('profile_output') is not None:
        if options.get('profiler') == 'yappi':
            import yappi
            yappi.set_context_backend('greenlet')
            pr = yappi
            pr.start(builtins=True)
        else:
            from eventlet.green import profile
            pr = profile.Profile()
            pr.start()
    else:
        pr = None
    res = wsgi.run_wsgi(conf_file, 'proxy-server',
                        global_conf_callback=global_conf_callback_wrapper,
                        **options)
    if pr:
        pr.stop()
        replacements = {'pid': os.getpid(),
                        'prog': os.path.basename(sys.argv[0])}
        output = options['profile_output'].format(**replacements)
        if options.get('profiler') == 'yappi':
            stats = pr.get_func_stats()
            out_type = ('callgrind'
                        if 'callgrind.out' in output
                        else 'pstat')
            stats.save(output, type=out_type)
            print("Profiling results written to %s (format: %s)" % (
                output, out_type))
        else:
            pr.dump_stats(output)
            print("Profiling results written to %s (format: old pstat)" % (
                output,))

    if options.get('objgraph'):
        run_objgraph(options.get('show_backrefs', list()))
    sys.exit(res)
